<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-02-02T13:11:12+09:00</updated><id>/feed.xml</id><title type="html">Huangzzk’s Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">STM32 ADC DMA 多通道传输时通道顺序错误问题</title><link href="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2020/01/28/STM32ADCDMA-duo-tong-dao-chuan-shu-shi-tong-dao-shun-xu-cuo-wu-wen-ti.html" rel="alternate" type="text/html" title="STM32 ADC DMA 多通道传输时通道顺序错误问题" /><published>2020-01-28T19:15:33+09:00</published><updated>2020-01-28T19:15:33+09:00</updated><id>/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2020/01/28/STM32ADCDMA-duo-tong-dao-chuan-shu-shi-tong-dao-shun-xu-cuo-wu-wen-ti</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2020/01/28/STM32ADCDMA-duo-tong-dao-chuan-shu-shi-tong-dao-shun-xu-cuo-wu-wen-ti.html">&lt;p&gt;问题终于解决了，折磨了好几天。&lt;/p&gt;

&lt;p&gt;具体问题是什么呢，假设我有一个电压矢量U3(abc三相的导通情况为011，也就是a的下桥、bc的上桥导通)，我将其导通3ms，我在3ms之中，要采样电流，那么理论上我要采样的是a相（因为电流采样电阻都连在下桥，只有下桥导通，才能测得电流。）但是呢，我发现无论怎么测试，U3导通的时候，总是在b相测到了电流，a相死活没有。&lt;/p&gt;

&lt;p&gt;玄学阿？我测试了U5（abc为101），理论上应该是b相可以采的到电流，但实际上在a相采到了。&lt;/p&gt;

&lt;p&gt;因为之前发现了以前写定时器的互补PWM波时，使用PWM2模式是错的，改成了PWM1后，发现了这个问题。
又以为是PWM1的问题，但是画了半天图，确认了PWM1是对的，以前写PWM2确实错了。(虽然PWM2也能跑，但与本意相违)。&lt;/p&gt;

&lt;p&gt;终于在昨天有了重大进展，发现无论怎么样，只有ab相相反，与C相无关。这就排除了PWM1的问题。&lt;/p&gt;

&lt;p&gt;然后又以为是电机ABC三相上，代码上定时器的通道与原理图不一样，比如A相和B相的CCR弄反了，或者以为是把ADC的通道和原理图上AB相电流通道弄反了，看了好久好久的原理图
和PCB，也没发现有啥问题。&lt;/p&gt;

&lt;p&gt;后来开始怀疑是ADC采样的问题，但配置上也没啥问题阿。ADC2、两通道、DMA、TIM8的TRGO触发。&lt;/p&gt;

&lt;p&gt;试着将两通道改成一通道，比如在U3导通的时候，只采样A相电流。奇迹发生了，居然采到！！又试着在U5导通的时候，采样B相电流，同样也采到了！！！&lt;/p&gt;

&lt;p&gt;一共测试了不少个情况（只采样一个通道）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;电压矢量&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;采样相&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;是否有电流&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;理论电流采样相&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;U3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;有&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;U3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;U5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;U5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;有&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;B&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;也就是说，如果只采样一个通道，那么就完全没问题，和理论是一致的。但一旦采样两相，则AB两相的电流情况就反过来了。&lt;/p&gt;

&lt;p&gt;于是开始把重心放在是什么导致ADC DMA顺序错乱的问题上。百度了许多，确实也有人出现这个顺序错乱的问题，但主要集中在：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用标准库&lt;/li&gt;
  &lt;li&gt;ADC、DMA初始化顺序不对（正确顺序应该是先初始化DMA、再初始化ADC）&lt;/li&gt;
  &lt;li&gt;DMA开了之后，又进行ADC校准（这个ADC校准也会触发一次DMA请求，结果导致DMA的结果会往后退一项，导致顺序错误）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述几种情况都是使用标准库才会有的，因为HAL库中，ADC与DMA是一起初始化的，且HAL库中已经没有ADC校准的函数了。&lt;/p&gt;

&lt;p&gt;那又是为什么呢？上google搜了外网的信息，有关adc dma顺序的问题也是有，不过是关于在CubeMX的某个版本生成的代码中，把DMA初始化放在ADC初始化之后了，从而导致DMA不能用。和我的问题也不一样。&lt;/p&gt;

&lt;p&gt;惆怅。其实在程序里手动把两个电流换一下顺序也能用，但心里就是不舒服，总感觉是一个隐患。&lt;/p&gt;

&lt;p&gt;万念俱灰的时候，修改了一下两句代码的顺序，原来我写的顺序是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    FOC一堆初始化
    HAL_TIM_Base_Start(&amp;amp;htim8);
    HAL_ADC_Start_DMA(&amp;amp;hadc2,(uint32_t *)ADC_Values_Raw2,2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之前我已经调换过这两句话的顺序了，问题依旧。但这次，我将ADC_DMA开启函数拉到其他地方，ADC初始化完之后，马上就开启DMA。奇迹出现了，好了！顺序也不乱了。&lt;/p&gt;

&lt;p&gt;我的天哪。服了。所以就是ADC的触发源（TIM8）与ADC DMA的顺序太靠近了，可能TIM8开始计时的时候触发了一次ADC?(但实际上，即使触发了一次ADC，也应该触发两次转换阿，怎么会使顺序错乱呢？小声bb)&lt;/p&gt;</content><author><name></name></author><summary type="html">问题终于解决了，折磨了好几天。</summary></entry><entry><title type="html">Git 将git仓库下的某个文件分离为子模块单独开发</title><link href="/%E6%8A%80%E6%9C%AF/2020/01/26/Git-jiang-git-cang-ku-xia-de-mou-ge-wen-jian-fen-li-wei-zi-mo-kuai-dan-du-kai-fa.html" rel="alternate" type="text/html" title="Git 将git仓库下的某个文件分离为子模块单独开发" /><published>2020-01-26T23:48:47+09:00</published><updated>2020-01-26T23:48:47+09:00</updated><id>/%E6%8A%80%E6%9C%AF/2020/01/26/Git-jiang-git-cang-ku-xia-de-mou-ge-wen-jian-fen-li-wei-zi-mo-kuai-dan-du-kai-fa</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/2020/01/26/Git-jiang-git-cang-ku-xia-de-mou-ge-wen-jian-fen-li-wei-zi-mo-kuai-dan-du-kai-fa.html">&lt;h2 id=&quot;记录一下&quot;&gt;记录一下：&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git subtree split -P &amp;lt;name-of-folder&amp;gt; -b &amp;lt;name-of-new-branch&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;name-of-folder 目录名&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;name-of-new-branch-新子模块名&quot;&gt;name-of-new-branch 新子模块名&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;创建一个新的repo
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
git pull &amp;lt;/path/to/big-repo&amp;gt; &amp;lt;name-of-new-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;推到github的一个新仓库下&quot;&gt;推到github的一个新仓库下&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;添加子模块
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git submodule add &amp;lt;git@github.com:my-user/new-repo.git &amp;lt;name-of-folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">记录一下： git subtree split -P &amp;lt;name-of-folder&amp;gt; -b &amp;lt;name-of-new-branch&amp;gt; name-of-folder 目录名 name-of-new-branch 新子模块名</summary></entry><entry><title type="html">解决AS5047读取中经常出现0的问题</title><link href="/%E6%8A%80%E6%9C%AF/2020/01/23/jie-jue-AS5047-du-qu-zhong-jing-chang-chu-xian-0-de-wen-ti.html" rel="alternate" type="text/html" title="解决AS5047读取中经常出现0的问题" /><published>2020-01-23T12:32:30+09:00</published><updated>2020-01-23T12:32:30+09:00</updated><id>/%E6%8A%80%E6%9C%AF/2020/01/23/jie-jue-AS5047-du-qu-zhong-jing-chang-chu-xian-0-de-wen-ti</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/2020/01/23/jie-jue-AS5047-du-qu-zhong-jing-chang-chu-xian-0-de-wen-ti.html">&lt;p&gt;这个问题去年衣容颉调马的时候有发现，当时我也跟他看了半天，没发现哪里有问题，最后是在程序里处理了一下，
一旦发现读到0，就不要那个值。&lt;/p&gt;

&lt;p&gt;最近在调无刷电机，这个问题又出现了，一开始以为是磁铁离得太远导致的，对着磁铁一顿敲，但情况似乎没有改变。&lt;/p&gt;

&lt;p&gt;于是将读取的寄存器从0x3FFFF（位置）改成了0x3FFFC（某个参数寄存器），这个参数寄存器和磁铁就没关系了，
不管有没有磁铁，参数应该是固定的。但读取的时候发现，这个参数也会出现读到0的情况。&lt;/p&gt;

&lt;p&gt;怀疑是因为使用SPI轮询读取，设置超时时间是100ms，但我每次读取的时间是2ms。会不会是因为中间读取的某次
超时了？但设置了一个变量来接收每次SPI操作的返回值，如果说是超时的话，应该会返回OUTTIME的错误码的，但每次
返回的都是0(HAL_OK)。&lt;/p&gt;

&lt;p&gt;接下来怀疑是SPI读取的问题，SPI的配置的话，2EDGE，16位读取，都没什么问题，应该不是配置的问题。&lt;/p&gt;

&lt;p&gt;仔细看了下原来的读取时序：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;发送读取错误寄存器(0x01)的命令（每次读取位置前要先读一下这个，以清空错误标志，如果不清空，读取位置会一直报错）&lt;/li&gt;
  &lt;li&gt;发送读取位置寄存器(0x3FFF)的命令，同时接收错误寄存器的值&lt;/li&gt;
  &lt;li&gt;接收位置寄存器的值&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Read_Reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//uint8_t result[2]={0};&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//uint8_t command[2]={0x7F,0xFE};&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_Transmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_TransmitReceive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AS_5047_Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_Receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;乍一看好像没啥问题，去年和衣容颉调的时候，我也没觉得有啥问题。今天突然发现最后一步（接收位置寄存器的值）可能有问题。&lt;/p&gt;

&lt;p&gt;也就是&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_Receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;SPI协议的工作原理就是一入一出，你要从机吐出点什么，你也要给他点什么。（因为有MISO与MOSI两条线，从机不仅在MISO上输出，他也检测MOSI线上的输入）。
所以正常使用SPI应该是HAL_SPI_TransmitReceive，发送并接收。&lt;/p&gt;

&lt;p&gt;但有时候因为接收的东西不重要，我就会调用HAL_SPI_Transmit，单纯用来发送。&lt;/p&gt;

&lt;p&gt;发送的东西不重要，就调用HAL_SPI_Receive，单纯用来接收。那么HAL_SPI_Receive里，到底发送了什么呢？看了一下实现代码，发现他是把接收的变量发出去了。有点抽象，举例来说。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_Receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;内部实际上调用的是：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_TransmitReceive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;也就是说，发送和接收的指针都指向result。&lt;/p&gt;

&lt;p&gt;那么result在还没接收到数据的时候，值为0，如果将0发送到AS5047的话，按照它的协议，这个命令是指对寄存器0x0000，写入。&lt;/p&gt;

&lt;p&gt;但查了AS5047的手册，它并没有说明对寄存器0x0000写入会发生什么，（只说了对0x0000读取则相当于NOP操作），因此可能是一个未定义操作。&lt;/p&gt;

&lt;p&gt;问题很可能在这了，根据这个推测，修改最后一步的代码：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HAL_SPI_TransmitReceive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPI_USE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//OK=HAL_SPI_Receive(&amp;amp;SPI_USE,(uint8_t *)&amp;amp;result,1,100);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Set_CSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;直接指定要发送的数据为Command(0x00,1)(即读取0x0000寄存器的值，手册中说此操作即为NOP)。&lt;/p&gt;

&lt;p&gt;经过测试，发现确实有效，数据0不再出现。What a fuck.&lt;/p&gt;

&lt;p&gt;再多分析几步，如果对0x0000是个可写寄存器的话，那么按照as5047的时序，先发送写命令，接下来要发送写的数据。那么写的数据是谁呢？就是下一次要发送的   读取错误寄存器(0x01)的命令(command(0x01,1))。&lt;/p&gt;

&lt;p&gt;也即这样的话，下一次就没有读取到错误寄存器，那么再下一步
“发送读取位置寄存器(0x3FFF)的命令，同时接收错误寄存器的值”
会发生什么呢，发送肯定是正常发送，但是接收会接收到往0x0000寄存器写入的值，也即command(0x01,1)。下一步又开始读取位置寄存器的值（并偷偷发送写0x0000寄存器的命令），似乎也没什么大问题，只要错误寄存器的没出错的话，应该是一直能接收到位置的才对。或者说，即使出问题，频率也应该是固定的，即每隔几次必有一次读到0。但我从波形中看到，出现读为0的值的频率是不固定的。&lt;/p&gt;

&lt;p&gt;所以目前只能猜测了，0x0000并不是一个可写寄存器，对其发送写入命令的话，会引发不可知的问题。&lt;/p&gt;

&lt;p&gt;同时，HAL_SPI_Receive我在NRF中似乎也用了，改天再去看看是否也会因此出现问题。无线手柄之前一直有出现读到0的情况，说不定真的于此有关。&lt;/p&gt;</content><author><name></name></author><summary type="html">这个问题去年衣容颉调马的时候有发现，当时我也跟他看了半天，没发现哪里有问题，最后是在程序里处理了一下， 一旦发现读到0，就不要那个值。</summary></entry><entry><title type="html">本杰明代码分析</title><link href="/%E6%8A%80%E6%9C%AF/2020/01/20/ben-jie-ming-dai-ma-fen-xi.html" rel="alternate" type="text/html" title="本杰明代码分析" /><published>2020-01-20T21:40:26+09:00</published><updated>2020-01-20T21:40:26+09:00</updated><id>/%E6%8A%80%E6%9C%AF/2020/01/20/ben-jie-ming-dai-ma-fen-xi</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/2020/01/20/ben-jie-ming-dai-ma-fen-xi.html">&lt;p&gt;foc初始化顺序：&lt;/p&gt;

&lt;p&gt;Main.c中：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mc_interface_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcconf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//路径 \bldc\mc_interface.c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;mc_interface.c 中&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mcpwm_foc_init&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SVPWM函数：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Magnitude must not be larger than sqrt(3)/2, or 0.866&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tAout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tBout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tCout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svm_sector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//quadrant I&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//quadrant II&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//quadrant IV5&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//quadrant III&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// sector 1-2&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Vector on-times&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TWO_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// sector 2-3&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Vector on-times&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// sector 3-4&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Vector on-times&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TWO_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// sector 4-5&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Vector on-times&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TWO_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// sector 5-6&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Vector on-times&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// sector 6-1&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Vector on-times&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TWO_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_BY_SQRT3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// PWM timings&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWMHalfPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tAout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tBout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tCout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svm_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">foc初始化顺序：</summary></entry><entry><title type="html">《计算机组成与设计 硬件软件接口》 笔记 二</title><link href="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/16/ji-suan-ji-zu-cheng-yu-she-ji-ying-jian-ruan-jian-jie-kou-bi-ji-er.html" rel="alternate" type="text/html" title="《计算机组成与设计 硬件软件接口》 笔记 二" /><published>2019-12-16T16:00:32+09:00</published><updated>2019-12-16T16:00:32+09:00</updated><id>/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/16/ji-suan-ji-zu-cheng-yu-she-ji-ying-jian-ruan-jian-jie-kou-bi-ji-er</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/16/ji-suan-ji-zu-cheng-yu-she-ji-ying-jian-ruan-jian-jie-kou-bi-ji-er.html">&lt;h2 id=&quot;计算机算数运算&quot;&gt;计算机算数运算&lt;/h2&gt;

&lt;h3 id=&quot;加减法&quot;&gt;加减法&lt;/h3&gt;

&lt;p&gt;溢出发生于：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;两个符号相同的数相加&lt;/li&gt;
  &lt;li&gt;两个符号不同的数相减&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然了，上面两种情况也不一定发生，只有当数足够大（或足够小）时，才会溢出。&lt;/p&gt;

&lt;p&gt;MIPS提供一些指令，来处理溢出的情况。如：add sub addi等，也有addu subu addu这些指令忽略溢出。&lt;/p&gt;

&lt;p&gt;忽略的意思是溢出的时候，不会产生异常（中断）&lt;/p&gt;

&lt;p&gt;C 语言忽略溢出，所以MIPS的C编译器一般用addu subu这些指令。&lt;/p&gt;

&lt;h3 id=&quot;乘法&quot;&gt;乘法&lt;/h3&gt;

&lt;p&gt;MIPS 忽略乘法溢出
乘法步骤：  乘数 X  被乘数&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;乘数左移&lt;/li&gt;
  &lt;li&gt;判断被乘数最低位，如果是1，则加上乘数&lt;/li&gt;
  &lt;li&gt;被乘数右移&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上是只用一个加法器的方法，当然了，可以通过用32个加法器来加速。最快的加速方式达到小于5次加法的时间。&lt;/p&gt;

&lt;h3 id=&quot;除法&quot;&gt;除法&lt;/h3&gt;

&lt;p&gt;除法优化难度较大，因为不能像乘法那样，一下子给32个加法器。除法需要试探每次的余数是否大于除数。&lt;/p&gt;

&lt;p&gt;除数优化的方法是使用一种SRT的猜测方式，如果猜测不对的话，可以在后续操作中修正。这里我没看太懂。&lt;/p&gt;

&lt;p&gt;MIPS的除法指令也忽略溢出&lt;/p&gt;

&lt;h3 id=&quot;浮点数&quot;&gt;浮点数&lt;/h3&gt;
&lt;p&gt;(单精度)浮点数的表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_float.png&quot; alt=&quot;浮点数的表示&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ieee-754&quot;&gt;IEEE 754&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_ieee754.png&quot; alt=&quot;IEEE754&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，这里隐含的前导1是针对规格化二进制数而言的。
所谓规格化二进制数，就是指数部分不为0的数。&lt;/p&gt;

&lt;p&gt;举例:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0 的表示 00000000000000000…&lt;/li&gt;
  &lt;li&gt;1 的表示 符号位0,指数为0,尾数为1 (因为1为非规格化二进制数，指数部分为0，因此没有隐含的前导1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IEEE754的表示编码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_ieee754_2.png&quot; alt=&quot;IEEE754&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IEEE754的指数表示不是使用补码，使用的是：带偏阶的计数法。&lt;/p&gt;

&lt;p&gt;单精度浮点的偏阶是127&lt;/p&gt;

&lt;p&gt;双精度浮点的偏阶是1023&lt;/p&gt;

&lt;p&gt;以单精度为例，之所以用这种方式，是为了让最大的指数表示为1111 1111（二进制），最小的（负）指数表示为：0000 0000。&lt;/p&gt;

&lt;p&gt;我感觉是脱裤子放屁。&lt;/p&gt;</content><author><name></name></author><summary type="html">计算机算数运算</summary></entry><entry><title type="html">《计算机组成与设计 硬件软件接口》 笔记</title><link href="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/11/ji-suan-ji-zu-cheng-yu-she-ji-ying-jian-ruan-jian-jie-kou-bi-ji.html" rel="alternate" type="text/html" title="《计算机组成与设计 硬件软件接口》 笔记" /><published>2019-12-11T00:23:25+09:00</published><updated>2019-12-11T00:23:25+09:00</updated><id>/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/11/ji-suan-ji-zu-cheng-yu-she-ji-ying-jian-ruan-jian-jie-kou-bi-ji</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/11/ji-suan-ji-zu-cheng-yu-she-ji-ying-jian-ruan-jian-jie-kou-bi-ji.html">&lt;p&gt;得好好学学计算机组成和体系结构了。&lt;/p&gt;

&lt;h3 id=&quot;计算机系统的八个设计原则&quot;&gt;计算机系统的八个设计原则&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;面向摩尔定律&lt;/li&gt;
  &lt;li&gt;抽象简化设计&lt;/li&gt;
  &lt;li&gt;加速大概率事件&lt;/li&gt;
  &lt;li&gt;通过并行提高性能&lt;/li&gt;
  &lt;li&gt;通过流水线提高性能&lt;/li&gt;
  &lt;li&gt;通过预测提高性能&lt;/li&gt;
  &lt;li&gt;存储器分层&lt;/li&gt;
  &lt;li&gt;通过冗余提高可靠性&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;组成计算机的五个部件&quot;&gt;组成计算机的五个部件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;输入&lt;/li&gt;
  &lt;li&gt;输出&lt;/li&gt;
  &lt;li&gt;存储器&lt;/li&gt;
  &lt;li&gt;数据通路&lt;/li&gt;
  &lt;li&gt;控制器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;处理器（CPU）指数据通路+控制&lt;/p&gt;

&lt;h3 id=&quot;存储器&quot;&gt;存储器&lt;/h3&gt;
&lt;p&gt;DRAM:dynamic random access memory: 动态随机访问存储器
SRAM:static random access memory:静态随机访问存储器&lt;/p&gt;

&lt;p&gt;SRAM 速度比 DRAM快，一般用作缓存，在存储器分层中，是DRAM的上层&lt;/p&gt;

&lt;p&gt;非易失性存储器：磁盘（硬盘）、闪存&lt;/p&gt;

&lt;h3 id=&quot;性能的定义&quot;&gt;性能的定义&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;响应时间:某个程序的执行时间&lt;/li&gt;
  &lt;li&gt;吞吐率:单位时间完成的任务数量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CPI:clock cycle per instruction(每条指令所需要的时钟周期平均数&lt;/p&gt;

&lt;h2 id=&quot;mips-指令集32位-mips&quot;&gt;MIPS 指令集（32位 MIPS)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;32个寄存器，每个寄存器32 bit&lt;/li&gt;
  &lt;li&gt;指令字段(R型指令)，从高到底分别为 op , rs , rt, rd, shamt , func
    &lt;ul&gt;
      &lt;li&gt;op 操作码&lt;/li&gt;
      &lt;li&gt;rs 第一个源操作数寄存器&lt;/li&gt;
      &lt;li&gt;rt 第二个源操作数寄存器&lt;/li&gt;
      &lt;li&gt;rd 结果保存寄存器&lt;/li&gt;
      &lt;li&gt;shamt 偏移量&lt;/li&gt;
      &lt;li&gt;func 功能码，用于指令变式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;R型指令的偏移量shamt 只有5位，最大才32，因此为了加大偏移量，又有了I型指令，方便立即数的操作&lt;/li&gt;
  &lt;li&gt;I型指令：op rs rt constant_or_address(16位)&lt;/li&gt;
  &lt;li&gt;J型指令：op address(26位),用于立即数跳转&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_op_code.png&quot; alt=&quot;MIPS指令编码&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mips-过程子程序调用&quot;&gt;MIPS 过程（子程序）调用&lt;/h3&gt;
&lt;p&gt;过程调用寄存器分配：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a0-a3,放置参数&lt;/li&gt;
  &lt;li&gt;v0,v1,放置返回值&lt;/li&gt;
  &lt;li&gt;ra,放置过程结束后要返回的指令地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_process.png&quot; alt=&quot;过程执行&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，如果过程的参数超过4个，或者结果超过2个的情况如何处理呢。使用栈。栈也用来在过程调用前，保存一些寄存器的值，在过程调用后恢复。&lt;/p&gt;

&lt;p&gt;除了寄存器的值，一些局部变量也可能需要用到栈，比如临时寄存器用完之后。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;栈指针sp, 总是指向栈顶&lt;/li&gt;
  &lt;li&gt;帧指针fp, 总是指向活动帧的第一个字，实际上就是指向栈底
    &lt;ul&gt;
      &lt;li&gt;帧指针不是必须的，因为实际上对于栈来说，它不需要知道栈底。入栈出栈只需知道栈顶即可&lt;/li&gt;
      &lt;li&gt;有些编译器使用了帧指针(GNU MIPS C),有些编译器则没有使用(MIPS C)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_memory.png&quot; alt=&quot;内存分配&quot; /&gt;&lt;/p&gt;

&lt;p&gt;超过四个参数的处理方式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_more_than_4.png&quot; alt=&quot;超过4个参数的处理方式&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;跳转-条件分支&quot;&gt;跳转 条件分支&lt;/h3&gt;
&lt;p&gt;跳转方式：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;立即数跳转（26位）&lt;/li&gt;
  &lt;li&gt;寄存器跳转（32位）&lt;/li&gt;
  &lt;li&gt;条件分支(16位)
    &lt;ul&gt;
      &lt;li&gt;条件分支跳转目的地位：16位字地址X4（转为字节地址）+ (PC+4)(下一条指令的地址)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上地址都是字地址，如果转为字节地址需要X4.&lt;/p&gt;

&lt;h3 id=&quot;寻址模式&quot;&gt;寻址模式&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_find_address.png&quot; alt=&quot;寻址模式总结&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;同步原语&quot;&gt;同步原语&lt;/h3&gt;
&lt;p&gt;这部分看得不是很懂。&lt;/p&gt;

&lt;p&gt;锁的建立过程：
在储存器的某个单元作为加锁的标志，1为加锁，0为未加锁。那么多个处理器如果要对这个储存器加锁，先访问这个单元，并将1对这个单元写1，并取得返回值（返回值是原值），那么当返回值为0时，即加锁成功。&lt;/p&gt;

&lt;p&gt;MIPS中使用指令对来实现同步原语。&lt;/p&gt;

&lt;p&gt;关于原子性：如果处理器的操作都是在这对（这条）指令前，或者指令后执行的，那么该指令就是原子的。&lt;/p&gt;

&lt;p&gt;在MIPS中，采用指令对。即第一条指令执行完之后，第二条指令来返回上条指令是不是原子的。怎么理解呢，第一条指令执行完之后，中间可能执行了其他指令，那么此时，返回值就是是非原子的。
对应的指令是：链接取数（load linked),条件存数(store conditional)&lt;/p&gt;</content><author><name></name></author><summary type="html">得好好学学计算机组成和体系结构了。</summary></entry><entry><title type="html">不带__weak 标志的函数（Strong函数）无法代替weak函数的问题</title><link href="/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/2019/12/08/bu-dai-weak-biao-zhi-de-han-shu-Strong-han-shu-wu-fa-dai-ti-weak-han-shu-de-wen-ti.html" rel="alternate" type="text/html" title="不带__weak 标志的函数（Strong函数）无法代替weak函数的问题" /><published>2019-12-08T12:24:17+09:00</published><updated>2019-12-08T12:24:17+09:00</updated><id>/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/2019/12/08/bu-dai-weak-biao-zhi-de-han-shu-Strong-han-shu-wu-fa-dai-ti-weak-han-shu-de-wen-ti</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/2019/12/08/bu-dai-weak-biao-zhi-de-han-shu-Strong-han-shu-wu-fa-dai-ti-weak-han-shu-de-wen-ti.html">&lt;p&gt;在C编程中，有时候需要写一些weak函数，用来给用户进行覆盖。&lt;/p&gt;

&lt;p&gt;之前写NRF的函数的时候，写了一个__weak void NRF_Receive_Callback(uint8_t * data,int len);&lt;/p&gt;

&lt;p&gt;用来给用户重载接收回调函数。然后我在main中，重新写了一个NRF_Receive_Callback，在IAR中编译、工作正常，NRF接收到
数据之后，会调用main中的callback。然而我用arm gcc编译之后，却发现不行，调用的还是原来的weak函数。在网上搜了半天，
有一篇文章说到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;多次试验和搜索，应该就是静态库的函数只有在要被用到的时候，才会被link，但weak symbol相对比较特殊，会先link到weak的function，然后再去找strong的function。因此strong的function实现在静态库里面，并且对应.o里函数也没被其他.o call 到，整个静态库都不会被link进去，因此最后只会选weak function。&lt;/p&gt;

  &lt;p&gt;应对的方式&lt;/p&gt;

  &lt;p&gt;A：利用—whole-archive和—no-whole-archive强制静态库被link进去，这样strong函数一定会被收到。缺点是如果lib之间有同名function会打出build error&lt;/p&gt;

  &lt;p&gt;B：和A类似，利用link选项-u强制某个function被link，但lib和function较多时不好用&lt;/p&gt;

  &lt;p&gt;作者：612F&lt;/p&gt;

  &lt;p&gt;链接：https://www.jianshu.com/p/be55f46b0e5e&lt;/p&gt;

  &lt;p&gt;来源：简书&lt;/p&gt;

  &lt;p&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想了一下确实是，main中的函数都没被其他文件调用，都是他调用别人。&lt;/p&gt;

&lt;p&gt;因为对makefile不太熟，我没去修改makefile的编译 链接选项了，直接把回调写到其他文件中，如control.c，测试正常，果然是这个问题。&lt;/p&gt;</content><author><name></name></author><summary type="html">在C编程中，有时候需要写一些weak函数，用来给用户进行覆盖。</summary></entry><entry><title type="html">VSCode搭建STM32的调试环境</title><link href="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/07/VSCode-da-jian-STM32-de-tiao-shi-huan-jing.html" rel="alternate" type="text/html" title="VSCode搭建STM32的调试环境" /><published>2019-12-07T18:38:13+09:00</published><updated>2019-12-07T18:38:13+09:00</updated><id>/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/07/VSCode-da-jian-STM32-de-tiao-shi-huan-jing</id><content type="html" xml:base="/%E6%8A%80%E6%9C%AF/%E7%A1%AC%E4%BB%B6/2019/12/07/VSCode-da-jian-STM32-de-tiao-shi-huan-jing.html">&lt;p&gt;大家都知道VScode是个好用的编辑器，通过配置也能成为IDE。&lt;/p&gt;

&lt;p&gt;之前在国内的时候其实和王智折腾过这事了，不过当时比较忙，也没把步骤好好记下来，以为应该是忘不了的，结果今天在这个电脑上要重新搭一下，还是费了一番功夫。&lt;/p&gt;

&lt;p&gt;主要是几个步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下载安装ARM的GCC工具链，主要是为了后面编译和VScode的智能提示
    &lt;ul&gt;
      &lt;li&gt;下载完后，如果之前没设置过，有些头文件如“String.h”会找不到，显示一个灯泡，可以点进那个灯泡去修改编译器路径，改成ARM_GCC的安装路径就行了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;下载安装mingGW，主要是为了安装make
    &lt;ul&gt;
      &lt;li&gt;安装完之后，默认make程序的文件名好像是mingw32_make.exe，可以给他改成make.exe，这样之后输入好打一点&lt;/li&gt;
      &lt;li&gt;记得添加到环境变量中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;安装VScode的cortex-debug插件&lt;/li&gt;
  &lt;li&gt;到STM32官网找相应芯片的SVD文件(为了调试时候能显示寄存器等信息),放到目录下&lt;/li&gt;
  &lt;li&gt;增加一个调试器，选择cortex-debug，然后配置几个参数，主要是 执行文件 、 svd 、芯片(device)等。&lt;/li&gt;
  &lt;li&gt;如果用Jlink的话，得把jlink的目录也添加到环境变量中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的一些记录&lt;/p&gt;

&lt;p&gt;makefile中如果要写：某个目录下的所有.c文件，可以类似这样写：$(wildcard mylib/*.c)&lt;/p&gt;</content><author><name></name></author><summary type="html">大家都知道VScode是个好用的编辑器，通过配置也能成为IDE。</summary></entry><entry><title type="html">开题</title><link href="/%E6%97%A5%E8%AE%B0/2019/11/30/kai-ti.html" rel="alternate" type="text/html" title="开题" /><published>2019-11-30T22:34:30+09:00</published><updated>2019-11-30T22:34:30+09:00</updated><id>/%E6%97%A5%E8%AE%B0/2019/11/30/kai-ti</id><content type="html" xml:base="/%E6%97%A5%E8%AE%B0/2019/11/30/kai-ti.html">&lt;p&gt;又是很久没时间来写日记了。&lt;/p&gt;

&lt;p&gt;终于在2019.11.25完成了我的硕士毕设开题答辩。&lt;/p&gt;

&lt;p&gt;开题过程不是很复杂，倒是准备的时候挺艰难的。之前一周刚好比较忙，实验室里要帮sasaki桑做无人机的脚，
而且每天要交机器人课的那个500字的英文报告。&lt;/p&gt;

&lt;p&gt;开题报告一开始只写了2000+字，后来跟石赵薇交流了一下，她说不行，必须按照字数要求来。好吧，重新加了些
废话，还从本科论文里找了些能复制的复制了进去，最后在各个章节都刚好满足要求的情况下，写了大概6800+字。&lt;/p&gt;

&lt;p&gt;できだ~&lt;/p&gt;

&lt;p&gt;答辩的时候，拜托石天仙用她的电脑和我远程，然后我远程播放了一下PPT。由于我的耳机不太好，麦克风说话经常有
问题，所以那天还找周从文和sasaki桑借了耳机。最后答辩有惊无险，老师很忙也没空听这区区开题，大概5分钟就
结束了。&lt;/p&gt;

&lt;p&gt;那天刚好有 “长江流域6大学”的中国交流生来我们实验室交流，开题答辩前还过去帮我们小组展示了一点点，哈哈哈。
当然了，主要讲PPT的是井上君。&lt;/p&gt;</content><author><name></name></author><summary type="html">又是很久没时间来写日记了。</summary></entry><entry><title type="html">在霓虹的日常吐槽</title><link href="/%E6%97%A5%E8%AE%B0/2019/10/23/zai-ni-hong-de-ri-chang-tu-cao.html" rel="alternate" type="text/html" title="在霓虹的日常吐槽" /><published>2019-10-23T18:05:22+09:00</published><updated>2019-10-23T18:05:22+09:00</updated><id>/%E6%97%A5%E8%AE%B0/2019/10/23/zai-ni-hong-de-ri-chang-tu-cao</id><content type="html" xml:base="/%E6%97%A5%E8%AE%B0/2019/10/23/zai-ni-hong-de-ri-chang-tu-cao.html">&lt;p&gt;不定时更新。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这里有些红绿灯居然是要按一个按钮，才会开始计时。有一天晚上出门在一个红绿灯下等了半天，结果后面来了个日本大叔按了下按钮，才知道还有这种操作。&lt;/li&gt;
  &lt;li&gt;找不到研究方向啊啊啊，机器手+无人机，也太难了。想了几个，无论是加IMU、还是加摄像头，感觉都只是工程应用，并没有什么突破。&lt;/li&gt;
  &lt;li&gt;下载了一本现代控制系统的PDF，打算好好学学控制。结果发现当年我学不下去果然不是没有理由的，这也太难了吧。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;今天实验室聚餐了（10.25），就在实验室里煮，下厨的是几个本科生？（我猜的，因为inoue桑下厨了），意外的很好吃诶。大家也都很热情。老师是个性情中人，喜欢喝酒。实验室的其他小伙伴还送了老师一个礼物，是一个木制的手机支架，看着做得挺精致的。本来inoue桑跟我说party每个人要交1000块，但我今天想拿给他的时候，他说因为是welcome party，所以就不用给啦，哈哈哈，真是太感谢了。最后我们要走的时候，他们也说不用收拾，最后估计还是inoue桑他们收拾，哎，真是不好意思。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;日本学生都是铁胃嘛，到了晚上七八点了大家都还在，而且好像也没吃过晚饭的迹象。我后来问井上桑，他说他一般是晚上回去十一点多才吃晚饭。震惊。&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最近每天下午最后两节都要上一门机器人学的课。第一次上课的是青山老师，很有趣的一个小老头。每次一进门就说“你好！”，一开始我以为听错了，后来发现
真的是你好。老师说他可以说英语、汉语、法语、泰语，但是不喜欢日语。哈哈哈。今天上课的是金山老师，之前申请老师的时候有看过，不过因为他实验室研究的课题我不太感兴趣就是了。老师也很有趣，英语没青山老师好，经常说着说着卡住，然后开始用日语自言自语，哈哈哈哈。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;日本人常说的”nomali”（音）到底是什么意思啊，不懂。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在实验室里，虽然sasaki-san他们挺照顾我，但有时候总感觉挺孤独的感觉。日本这边，对于什么东西是谁的分得比较清楚。我也不知道怎么举例，总之是经常有这种感觉吧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;昨天，11.29，和老周老刘两个抠脚出去吃披萨。本来以为会是一家和国内站点披萨那种类似的店。结果一去发现几乎就是一个有厨房的小店，只有一张桌子和一把椅子用来堂食（实际上只是用作摆设）。所以没办法，只好把披萨带回来了。我们买了2个R（中型，按照标注，1个R可供2-3个人吃），和1个M(小中，可供1-2个人吃）。
事实证明，我们对日本人的适量把握还是比较准确的，三个人吃这些刚刚好。
回来的时候，要决定去哪儿吃，经过剪刀石头布，最后来我宿舍吃了……吓得我赶紧整理了一下，不然是在太乱，很不好意思。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">不定时更新。</summary></entry></feed>